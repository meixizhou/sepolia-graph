// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DataWritten extends ethereum.Event {
  get params(): DataWritten__Params {
    return new DataWritten__Params(this);
  }
}

export class DataWritten__Params {
  _event: DataWritten;

  constructor(event: DataWritten) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get content(): string {
    return this._event.parameters[2].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EthTransferred extends ethereum.Event {
  get params(): EthTransferred__Params {
    return new EthTransferred__Params(this);
  }
}

export class EthTransferred__Params {
  _event: EthTransferred;

  constructor(event: EthTransferred) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DataVault extends ethereum.SmartContract {
  static bind(address: Address): DataVault {
    return new DataVault("DataVault", address);
  }

  counter(): BigInt {
    let result = super.call("counter", "counter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_counter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("counter", "counter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class TransferEthCall extends ethereum.Call {
  get inputs(): TransferEthCall__Inputs {
    return new TransferEthCall__Inputs(this);
  }

  get outputs(): TransferEthCall__Outputs {
    return new TransferEthCall__Outputs(this);
  }
}

export class TransferEthCall__Inputs {
  _call: TransferEthCall;

  constructor(call: TransferEthCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferEthCall__Outputs {
  _call: TransferEthCall;

  constructor(call: TransferEthCall) {
    this._call = call;
  }
}

export class WriteDataCall extends ethereum.Call {
  get inputs(): WriteDataCall__Inputs {
    return new WriteDataCall__Inputs(this);
  }

  get outputs(): WriteDataCall__Outputs {
    return new WriteDataCall__Outputs(this);
  }
}

export class WriteDataCall__Inputs {
  _call: WriteDataCall;

  constructor(call: WriteDataCall) {
    this._call = call;
  }

  get content(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class WriteDataCall__Outputs {
  _call: WriteDataCall;

  constructor(call: WriteDataCall) {
    this._call = call;
  }
}
