/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DataVaultInterface extends Interface {
  getFunction(
    nameOrSignature: "counter" | "transferEth" | "writeData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DataWritten" | "EthTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferEth",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "writeData", values: [string]): string;

  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writeData", data: BytesLike): Result;
}

export namespace DataWrittenEvent {
  export type InputTuple = [
    sender: AddressLike,
    id: BigNumberish,
    content: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    id: bigint,
    content: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    sender: string;
    id: bigint;
    content: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EthTransferredEvent {
  export type InputTuple = [
    sender: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    to: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    sender: string;
    to: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataVault extends BaseContract {
  connect(runner?: ContractRunner | null): DataVault;
  waitForDeployment(): Promise<this>;

  interface: DataVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  counter: TypedContractMethod<[], [bigint], "view">;

  transferEth: TypedContractMethod<[to: AddressLike], [void], "payable">;

  writeData: TypedContractMethod<[content: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "counter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferEth"
  ): TypedContractMethod<[to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "writeData"
  ): TypedContractMethod<[content: string], [void], "nonpayable">;

  getEvent(
    key: "DataWritten"
  ): TypedContractEvent<
    DataWrittenEvent.InputTuple,
    DataWrittenEvent.OutputTuple,
    DataWrittenEvent.OutputObject
  >;
  getEvent(
    key: "EthTransferred"
  ): TypedContractEvent<
    EthTransferredEvent.InputTuple,
    EthTransferredEvent.OutputTuple,
    EthTransferredEvent.OutputObject
  >;

  filters: {
    "DataWritten(address,uint256,string,uint256)": TypedContractEvent<
      DataWrittenEvent.InputTuple,
      DataWrittenEvent.OutputTuple,
      DataWrittenEvent.OutputObject
    >;
    DataWritten: TypedContractEvent<
      DataWrittenEvent.InputTuple,
      DataWrittenEvent.OutputTuple,
      DataWrittenEvent.OutputObject
    >;

    "EthTransferred(address,address,uint256,uint256)": TypedContractEvent<
      EthTransferredEvent.InputTuple,
      EthTransferredEvent.OutputTuple,
      EthTransferredEvent.OutputObject
    >;
    EthTransferred: TypedContractEvent<
      EthTransferredEvent.InputTuple,
      EthTransferredEvent.OutputTuple,
      EthTransferredEvent.OutputObject
    >;
  };
}
